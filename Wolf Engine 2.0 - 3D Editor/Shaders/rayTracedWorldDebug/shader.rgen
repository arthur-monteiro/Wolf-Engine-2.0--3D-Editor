#extension GL_EXT_ray_tracing : require

layout(binding = 0, set = 0, r32f) uniform image2D image;
layout(binding = 1, set = 0, std140) uniform readonly UniformBufferDisplay
{
	uint displayType;
} ubDisplay;

#include "../common/displayTypes.glsl"

struct Payload
{
    float hitDistance;
    uint instanceId;
    uint primitiveId;
    vec3 albedo;
};
layout(location = 0) rayPayloadEXT Payload payload;

float rand2(vec2 co)
{
    return max(fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453), 0.25);
}

vec3 randomColor(uint seed)
{
    seed %= 1024;
    vec2 co = vec2(float(seed), float(seed / 4952000));
    return vec3(rand2(co), rand2(co + vec2(47)), rand2(co + vec2(29214)));
}

void main() 
{
    const vec2 pixelPos = vec2(gl_LaunchIDEXT.xy);
    const vec2 inUV = pixelPos / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = getInvViewMatrix() * vec4(0, 0, 0, 1);
    vec4 target = getInvProjectionMatrix() * vec4(d.x, d.y, 1, 1) ;
    vec4 direction = getInvViewMatrix() * vec4(normalize(target.xyz), 0);

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 1000.0;

    traceRay(rayFlags, cullMask, 0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, origin.xyz, tmin, direction.xyz, tmax);

    if (ubDisplay.displayType == DISPLAY_TYPE_RAY_TRACED_WORLD_DEBUG_ALBEDO)
    {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.albedo, 1.0));
    }
    else if (ubDisplay.displayType == DISPLAY_TYPE_RAY_TRACED_WORLD_DEBUG_INSTANCE_ID)
    {
        if (payload.instanceId == -1)
        {
            imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(vec3(0.1), 1.0));
        }
        else
        {
            imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(randomColor(payload.instanceId), 1.0));
        }
    }
    else if (ubDisplay.displayType == DISPLAY_TYPE_RAY_TRACED_WORLD_DEBUG_PRIMITIVE_ID)
    {
        if (payload.primitiveId == -1)
        {
            imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(vec3(0.1), 1.0));
        }
        else
        {
            imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(randomColor(payload.primitiveId), 1.0));
        }
    }
}